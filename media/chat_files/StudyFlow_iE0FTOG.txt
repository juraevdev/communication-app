StudyFlow modelimizning hozirgi holati:
accounts:
admin.py: from django.contrib import admin
from accounts.models import CustomUser, UserPreferences, UserConfirmation
from django.contrib.auth.admin import UserAdmin
from django.utils.translation import gettext_lazy as _

@admin.register(CustomUser)
class CustomUserAdmin(UserAdmin):
    fieldsets = (
        (None, {"fields": ("password",)}),
        (_("Personal info"), {"fields": ("first_name", "last_name", "email")}),
        (
            _("Permissions"),
            {
                "fields": (
                    "is_active",
                    "is_staff",
                    "is_superuser",
                    "groups",
                    "user_permissions",
                ),
            },
        ),
        (_("Important dates"), {"fields": ("last_login", "date_joined")}),
    )
    add_fieldsets = (
        (
            None,
            {
                "classes": ("wide",),
                "fields": ("first_name", "last_name", "email", "password1", "password2"),
            },
        ),
    )

    @admin.display(description="Full Name")
    def display_fullname(self, obj):
        return obj.get_fullname

    list_display = ("display_fullname", "email", "first_name", "last_name", "is_staff")
    search_fields = ("first_name", "last_name", "email")
    ordering = ("email",)



@admin.register(UserPreferences)
class UserProfileAdmin(admin.ModelAdmin):
    fieldsets = (
        ('Preferences', {
            'fields': ('user', 'language','timezone', 'daily_remainder'),
        }),
    )

admin.site.register(UserConfirmation)

models.py:
import random
import datetime
from django.db import models
from django.utils import timezone
from django.contrib.auth.models import AbstractUser
from accounts.managers import CustomUserManager


INTERFACE_LANGUAGE = (
    ('English', 'english'),
    ('Uzbek', 'uzbek'),
    ('Russia', 'russia'),
)

TIMEZONE = (
    ('Pacific', 'pacific'),
    ('Mountain', 'mountain'),
    ('Central', 'central'),
    ('Eastern', 'eastern'),
    ('GMT', 'gmt'),
    ('Central European', 'central european'),
    ('Japan Standard', 'japan standard'),
)

class CustomUser(AbstractUser):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    username = None
    
    objects = CustomUserManager()

    @property
    def get_fullname(self):
        return f"{self.first_name} {self.last_name}"
    
    def __str__(self):
        return f"{self.first_name} - {self.email}"
    

    def generate_verify_code(self):
        code = ''.join(str(random.randint(0, 9)) for _ in range(5))
        UserConfirmation.objects.create(
            user=self,
            code=code,
            expires=timezone.now() + datetime.timedelta(minutes=2)
        )
        return code


    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']


class UserPreferences(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='preferences')
    language = models.CharField(max_length=20, choices=INTERFACE_LANGUAGE, default='english')
    timezone = models.CharField(max_length=50, choices=TIMEZONE, default='Eastern')
    daily_remainder = models.BooleanField(default=False)


    def __str__(self):
        return f"{self.user} - {self.language}"
    

class UserConfirmation(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    code = models.CharField(max_length=5)
    expires = models.DateTimeField(null=True, blank=True)
    is_used = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.user} - {self.code}"

serializers.py:
from rest_framework import serializers
from accounts.models import CustomUser, UserPreferences
from django.contrib.auth.hashers import make_password

class RegisterSerializer(serializers.Serializer):
    first_name = serializers.CharField()
    last_name = serializers.CharField()
    email = serializers.EmailField()
    password = serializers.CharField()
    confirm_password = serializers.CharField()


    def validate(self, data):
        password = data.get('password')
        confirm_password = data.get('confirm_password')
        if password != confirm_password:
            raise serializers.ValidationError("Password didn't match!")
        return data
    

    def create(self, validated_data):
        user = CustomUser.objects.create_user(
            first_name = validated_data['first_name'],
            last_name = validated_data['last_name'],
            email = validated_data['email'],
            password = validated_data['password'],
        )
        return {
            'message': 'Registered successfully!'
        }


class LoginSerializer(serializers.Serializer):
    email = serializers.EmailField()
    password = serializers.CharField()


class ResendCodeSerializer(serializers.Serializer):
    email = serializers.CharField()


class PasswordResetRequestSerializer(serializers.Serializer):
    email = serializers.CharField()


class PasswordResetVerifySerializer(serializers.Serializer):
    code = serializers.CharField()


class PasswordResetSerializer(serializers.Serializer):
    email = serializers.CharField()
    new_password = serializers.CharField()
    confirm_password = serializers.CharField()

    def validate(self, data):
        new_password = data['new_password']
        confirm_password = data['confirm_password']
        if new_password != confirm_password:
            raise serializers.ValidationError("Password didn't match")
        confirm_password = make_password(confirm_password)
        return data
    

class UserPreferenceSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserPreferences
        fields = '__all__'


views.py:
from rest_framework import generics, status 
from django.utils import timezone
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.decorators import api_view, permission_classes
from rest_framework_simplejwt.tokens import RefreshToken
from accounts.models import CustomUser, UserConfirmation, UserPreferences
from accounts.serializers import (
    RegisterSerializer, LoginSerializer,
    PasswordResetRequestSerializer, ResendCodeSerializer,
    PasswordResetVerifySerializer, PasswordResetSerializer,
    UserPreferenceSerializer,
)

class RegisterApiView(generics.GenericAPIView):
    serializer_class = RegisterSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid(raise_exception=True):
            result = serializer.save()
            return Response(result, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    

class ResendCodeApiView(generics.GenericAPIView):
    serializer_class = ResendCodeSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        email = serializer.validated_data['email']
        user = CustomUser.objects.filter(email=email).first()
        if user is None:
            return Response({
                'message': 'User not found'
            }, status=status.HTTP_404_NOT_FOUND)
        code = user.generate_verify_code()
        return Response({'code': code}, status=status.HTTP_200_OK)
    

class LoginAPiView(generics.GenericAPIView):
    serializer_class = LoginSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid(raise_exception=True):
            email = serializer.validated_data['email']
            password = serializer.validated_data['password']

            user = CustomUser.objects.filter(email=email).first()
            if user is None:
                return Response({'error': 'User not found!'}, status=status.HTTP_404_NOT_FOUND)

            if not user.check_password(password):
                return Response({'error': 'Password is not correct!'}, status=status.HTTP_401_UNAUTHORIZED)

            refresh = RefreshToken.for_user(user)
            return Response({
                "refresh": str(refresh),
                "access": str(refresh.access_token)
            })

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class PasswordResetRequestApiView(generics.GenericAPIView):
    serializer_class = PasswordResetRequestSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid(raise_exception=True):
            email = serializer.data['email']
            user = CustomUser.objects.filter(email=email).first()
            if user is None:
                return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
            code = user.generate_verify_code()
            return Response({'message': 'Code is sent to your email. Please check your inbox', 'code': code}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    
class PasswordResetVerifyApiView(generics.GenericAPIView):
    serializer_class = PasswordResetVerifySerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid(raise_exception=True):
            code = serializer.data['code']
            user = request.user                                                           
            otp_code = UserConfirmation.objects.filter(code=code).first()
            if user is None:
                return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
            if otp_code is None or otp_code.expires < timezone.now():
                return Response({'error': 'Incorrect verification code'}, status=status.HTTP_401_UNAUTHORIZED)
            otp_code.is_used = True
            otp_code.save()
            return Response({'message': 'Verification code is correct. Now you can change your password'}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    
class PasswordResetApiView(generics.GenericAPIView):
    serializer_class = PasswordResetSerializer
    
    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid(raise_exception=True):
            email = serializer.data['email']
            new_password = serializer.data['new_password']
            confirm_password = serializer.data['confirm_password']
            user = CustomUser.objects.filter(email=email).first()
            otp_code = UserConfirmation.objects.filter(user=user, is_used=True).first()
            if user is None:
                return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
            if otp_code is None:
                return Response({'error': 'Verification code not confirmed'}, status=status.HTTP_401_UNAUTHORIZED)
            if not otp_code.is_used:
                return Response({'error': 'Bu emailda kod tasdiqlanmagan'}, status=status.HTTP_401_UNAUTHORIZED)
            user.set_password(confirm_password)
            user.save()
            return Response({'message': 'Your passowrd changed successfully'}, status=status.HTTP_202_ACCEPTED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) 


class ResendCodeApiView(generics.GenericAPIView):
    serializer_class = ResendCodeSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        email = serializer.validated_data['email']
        user = CustomUser.objects.filter(email=email).first()
        if user is None:
            return Response({'message': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
        code = user.generate_verify_code()
        return Response({'code':code}, status=status.HTTP_200_OK)


class UserPreferenceApiView(generics.GenericAPIView):
    serializer_class = UserPreferenceSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid(raise_exception=True):
            serializer.save()
            return Response({'message': 'User preference created!'}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    

class UserPreferenceUpdateApiView(generics.GenericAPIView):
    serializer_class = UserPreferenceSerializer

    def put(self, request, id):
        preference = UserPreferences.objects.get(id=id)
        serializer = self.get_serializer(preference, data=request.data)
        if serializer.is_valid(raise_exception=True):
            serializer.save()
            return Response({'message': 'Preference updated!'}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    

class UserPreferenceDeleteApiView(generics.GenericAPIView):
    serializer_class = UserPreferenceSerializer

    def delete(self, request, id):
        preference = UserPreferences.objects.get(id=id)
        serializer = self.get_serializer(preference, data=request.data)
        preference.delete()
        return Response({'message': 'Preference deleted!'}, status=status.HTTP_200_OK)
    

class UserPreferenceDetailApiView(generics.GenericAPIView):
    serializer_class = UserPreferenceSerializer

    def get(self, request, id):
        preference = UserPreferences.objects.get(id=id)
        serializer = self.get_serializer(preference)
        return Response(serializer.data, status=status.HTTP_200_OK)
    

class AllUserPreferenceApiView(generics.GenericAPIView):
    serializer_class = UserPreferenceSerializer

    def get(self, request):
        preference = UserPreferences.objects.all()
        serializer = self.get_serializer(preference, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_daily_remainder(request):
    preferences = getattr(request.user, 'preferences', None)
    if preferences and preferences.daily_remainder:
        return Response({
            "show_remainder": True,
            "message": "Bugungi o‘quv vazifalaringizni boshlang!"
        })
    return Response({"show_remainder": False})

urls.py:
from django.urls import path
from accounts.views import (
    RegisterApiView, ResendCodeApiView,
    PasswordResetRequestApiView, PasswordResetVerifyApiView,
    PasswordResetApiView, LoginAPiView,
    UserPreferenceApiView, UserPreferenceUpdateApiView,
    UserPreferenceDeleteApiView, UserPreferenceDetailApiView,
    AllUserPreferenceApiView,
)

urlpatterns = [
    path('register/', RegisterApiView.as_view()),
    path('login/', LoginAPiView.as_view()),
    path('password/reset-request/', PasswordResetRequestApiView.as_view()),
    path('password/reset-verify/', PasswordResetVerifyApiView.as_view()),
    path('password/reset/', PasswordResetApiView.as_view()),
    path('password/resend/code/', ResendCodeApiView.as_view()),
    path('preference/create/', UserPreferenceApiView.as_view()),
    path('preference/edit/<int:id>/', UserPreferenceUpdateApiView.as_view()),
    path('preference/delete/<int:id>/', UserPreferenceDeleteApiView.as_view()),
    path('preference/<int:id>/', UserPreferenceDetailApiView.as_view()),
    path('preference/all/', AllUserPreferenceApiView.as_view()),
]

tasks.py:
from celery import shared_task
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from accounts.models import UserPreferences
from django.utils import timezone
import pytz

@shared_task
def send_daily_remainders():
    channel_layer = get_channel_layer()
    now_utc = timezone.now()

    users = UserPreferences.objects.filter(daily_remainder=True)

    for pref in users:
        try:
            user_tz = pytz.timezone(pref.timezone)
        except Exception:
            continue  

        user_now = now_utc.astimezone(user_tz)
        if user_now.hour == 8 and user_now.minute == 0:
            async_to_sync(channel_layer.group_send)(
                f"user_{pref.user.id}",
                {
                    'type': 'send_reminder',
                    'message': "📚 Bugungi o‘quv vazifangizni boshlang!"
                }
            )


routing.py:
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/reminders/(?P<user_id>\d+)/$', consumers.ReminderConsumer.as_asgi()),
]


consumers.py:
import json
from channels.generic.websocket import AsyncWebsocketConsumer

class ReminderConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.user_id = self.scope['url_route']['kwargs']['user_id']
        self.group_name = f'user_{self.user_id}'

        await self.channel_layer.group_add(self.group_name, self.channel_name)
        await self.accept()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(self.group_name, self.channel_name)

    async def send_reminder(self, event):
        await self.send(text_data=json.dumps({
            'message': event['message']
        }))

study:
admin.py:
from django.contrib import admin
from study.models import StudyPlan, Week, Task

admin.site.register(StudyPlan)
admin.site.register(Week)
admin.site.register(Task)


models.py:
from django.db import models
from accounts.models import CustomUser


Level = (
    ('beginner', 'Complete Beginner'),
    ('some', 'Some Knowledge'),
    ('intermediate', 'Intermediate'),
    ('advanced', 'Advanced'),
)

Learning_style = (
    ('visual', 'Visual'),
    ('reading', 'Reading'),
    ('hands_on', 'Hands-on'),
    ('mixed', 'Mixed Approach'),
)


class StudyPlan(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    subject = models.CharField(max_length=150)
    weeks = models.IntegerField(default=4)
    daily_minutes = models.PositiveSmallIntegerField(default=60)
    level = models.CharField(max_length=50, choices=Level, default='beginner')
    goal = models.TextField()
    learning_style = models.CharField(max_length=50, choices=Learning_style, default='mixed')
    created_at = models.DateTimeField(auto_now_add=True)


    def __str__ (self):
        return f'{self.user} - {self.subject}'



class Week(models.Model):
    study_plan = models.ForeignKey(StudyPlan, on_delete=models.CASCADE, related_name='plan_weeks')
    week_number = models.PositiveIntegerField()


    class Meta:
        unique_together = ('study_plan', 'week_number')


    def __str__(self):
        return f"{self.study_plan.subject} - Week {self.week_number}"

    

class Task(models.Model):
    week = models.ForeignKey(Week, on_delete=models.CASCADE, related_name='tasks')
    title = models.CharField(max_length=250)
    description = models.TextField()
    estimated_time = models.DurationField()
    task_type = models.CharField(max_length=50, choices=[('reading', 'reading'), ('exercise', 'exercise'), ('project', 'project')])
    resources = models.JSONField(default=list)
    is_completed = models.BooleanField(default=False)


    def __str__(self):
        return f"{self.title} ({self.week})"

serializers.py:
from rest_framework import serializers
from study.models import StudyPlan


class StudyPlanSerializer(serializers.ModelSerializer):
    class Meta:
        model = StudyPlan
        fields = '__all__'

views.py:
from rest_framework import generics, status, permissions
from rest_framework.response import Response

from study.serializers import StudyPlanSerializer
from study.models import StudyPlan, Week, Task

from services.ai_service import generate_study_plan


class StudyPlanCreateView(generics.GenericAPIView):
    serializer_class = StudyPlanSerializer
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            study_plan = serializer.save(user=request.user)
            ai_plan = generate_study_plan(
                study_plan.subject,
                study_plan.weeks,
                study_plan.daily_minutes,
                study_plan.level,
                study_plan.goal,
                study_plan.learning_style
            )

            for week_data in ai_plan['weeks', []]:
                week = Week.objects.create(study_plan=study_plan, week_number=week_data['week_number'])
                for task_data in week_data['tasks']:
                    task = Task.objects.create(
                        user=request.user,
                        week=week,
                        title=task_data['title'],
                        description=task_data['description'],
                        estimated_time=task_data['estimated_time'],
                        task_type=task_data['task_type'],
                        resources=task_data['resources'],
                    )

            return Response({
                "message": "Study plan created successfully."
            }, 
                status=status.HTTP_201_CREATED
            )
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

urls.py:
from django.urls import path
from study.views import StudyPlanCreateView

urlpatterns = [
    path('study-plan/', StudyPlanCreateView.as_view(), name='study-plan-create'),
]

services:
ai_service.py:
from openai import OpenAI
import json
from django.conf import settings  
client = OpenAI(api_key="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")

def generate_study_plan(subject, weeks, daily_minutes, level, goal, learning_style):
    prompt = f"""
    Create a {weeks}-week study plan for {subject}.
    Level: {level}. Goal: {goal}.
    Learning style: {learning_style}.
    Daily time: {daily_minutes} minutes.
    Return in JSON format:
    {{
      "weeks": [
        {{
          "week_number": 1,
          "tasks": [
            {{
              "title": "...",
              "description": "...",
              "estimated_time": "01:00:00",
              "task_type": "reading",
              "resources": ["link1", "link2"]
            }}
          ]
        }}
      ]
    }}
    """
    response = client.chat.completions.create(
        model = "gpt-4o",
        messages = [
            {"role": "system", "content": "You are an expert study planner."},  
            {"role": "user", "content": prompt}
        ], 
        temperature = 0.7
    )

    content = response['choices'][0]['message']['content']
    return json.loads(content)

config:
settings.py:
from datetime import timedelta
import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


env = environ.Env()
environ.Env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')
OPEN_AI_KEY = env.str('OPEN_AI_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_yasg',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_celery_results',
    'django_celery_beat',
    'channels',

    'accounts',
    'study',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware'
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = 'config.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}


CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'


CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Tashkent'



# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGES = (
    ('en', 'English'),
    ('uz', 'Uzbek'),
    ('ru', 'Russian'),
)

MODELTRANSLATION_LANGUAGES = ('en', 'uz', 'ru')


TIME_ZONE = 'Asia/Tashkent'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTH_USER_MODEL = 'accounts.CustomUser'


JAZZMIN_SETTINGS = {
    "site_title": "StudyFlow Admin",
    "site_header": "StudyFlow Uz",
    "site_brand": "StudyFlow Uz",
    "site_logo": None,
    "login_logo": None,
    "login_logo_dark": None,
    "site_logo_classes": "img-circle",
    "site_icon": None,
    "welcome_sign": "Welcome to the StudyFlow",
    "copyright": "Acme StudyFlow Ltd",
    "search_model": ["auth.User", "auth.Group"],
    "user_avatar": None,
    "topmenu_links": [
        {"name": "Home",  "url": "admin:index",
            "permissions": ["auth.view_user"]},
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues",
            "new_window": True},
        {"model": "auth.User"},
        {"app": "books"},
    ],
    "usermenu_links": [
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues",
            "new_window": True},
        {"model": "auth.user"}
    ],
    "show_sidebar": True,
    "navigation_expanded": True,
    "hide_apps": [],
    "hide_models": [],
    "order_with_respect_to": ["auth", "books", "books.author", "books.book"],
    "custom_links": {
        "books": [{
            "name": "Make Messages",
            "url": "make_messages",
            "icon": "fas fa-comments",
            "permissions": ["books.view_book"]
        }]
    },
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
    },
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    "related_modal_active": False,
    "custom_css": None,
    "custom_js": None,
    "use_google_fonts_cdn": True,
    "show_ui_builder": False,
    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {"auth.user": "collapsible", "auth.group": "vertical_tabs"},
    "language_chooser": True,
}

JAZZMIN_UI_TWEAKS = {
    "theme": "flatly",
}


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
}

celery.py:
import os
from celery import Celery


os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')


app = Celery('config')


import django
django.setup()


app.config_from_object('django.conf:settings', namespace='CELERY')


app.autodiscover_tasks()


asgi.py:
import os
import django
from channels.routing import get_default_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()
application = get_default_application()


urls.py:
from django.contrib import admin
from django.urls import path, include
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework import permissions
from django.conf.urls.i18n import i18n_patterns

schema_view = get_schema_view(
   openapi.Info(
      title="StudyFlow API",
      default_version='v1',
      description="Test description",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@snippets.local"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('i18n/', include('django.conf.urls.i18n')),
    path('api/v1/accounts/', include('accounts.urls')),
    path('api/v1/study/', include('study.urls')),
    path('swagger<str:format>/', schema_view.without_ui(cache_timeout=0), name='schema-json'),
    path('', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
]

urlpatterns += i18n_patterns(
    path('set_language/', include('django.conf.urls.i18n')),
)