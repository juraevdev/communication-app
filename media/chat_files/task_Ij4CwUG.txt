models.py:
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.validators import RegexValidator

ROLE_CHOICES = (
    ('admin', 'Admin'),
    ('client', 'Client'),
    ('worker', 'Worker'),
)

GENDER_CHOICES = (
    ('male', 'Male'),
    ('female', 'Female'),
)

class CustomUser(AbstractUser):
    username = None
    email = None
    role = models.CharField(max_length=50, choices=ROLE_CHOICES, default='client')
    phone_number = models.CharField(max_length=15, unique=True, validators=[
                                    RegexValidator(regex=r'^\+998\d{9}$', message="Telefon raqam noto'g'ri formatda")])

    def __str__(self):
        return f'{self.first_name} - {self.role}'
    
    USERNAME_FIELD = 'phone_number'
    REQUIRED_FIELDS = []
    

class Client(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, related_name='client_profile')
    address = models.CharField(max_length=255)
    gender = models.CharField(max_length=20, choices=GENDER_CHOICES, default='male')

    def __str__(self):
        return f'{self.user.first_name} - {self.address}'

serializers.py:
from rest_framework import serializers

from accounts.models import CustomUser, Client


class RegisterSerializer(serializers.ModelSerializer):
    first_name = serializers.CharField()
    last_name = serializers.CharField()
    password = serializers.CharField()
    confirm_password = serializers.CharField()

    class Meta:
        model = CustomUser
        fields = ['first_name', 'last_name', 'role', 'password', 'confirm_password']

    
    def validate(self, data):
        password = data.get('password')
        confirm_password = data.get('confirm_password')
        if password != confirm_password:
            raise serializers.ValidationError('Password didn\'t match')
        return data
    
    def create(self, validated_data):
        user = CustomUser.objects.create_user(
            first_name = validated_data['first_name'],
            last_name = validated_data['last_name'],
            role = validated_data['role'],
            password = validated_data['password'],
        )
        return user
    

class ClientRegisterSerializer(serializers.Serializer):
    first_name = serializers.CharField()
    last_name = serializers.CharField()
    phone_number = serializers.CharField()
    address = serializers.CharField()
    gender = serializers.CharField()
    password = serializers.CharField(write_only=True)
    confirm_password = serializers.CharField(write_only=True)

    def validate(self, data):
        password = data.get('password')
        confirm_password = data.get('confirm_password')

        if password != confirm_password:
            raise serializers.ValidationError('Password didn\'t match')
        return data
    

    def create(self, validated_data):
        user = Client.objects.create(
            first_name = validated_data['first_name'],
            last_name = validated_data['last_name'],
            phone_number = validated_data['phone_number'],
            address = validated_data['address'],
            gender = validated_data['gender'],
            password = validated_data['password'],
        )
        return user


views.py:
from rest_framework import generics, status
from rest_framework.response import Response

from accounts.models import CustomUser, Client
from accounts.serializers import RegisterSerializer, ClientRegisterSerializer


class RegisterApiView(generics.GenericAPIView):
    serializer_class = RegisterSerializer
    queryset = CustomUser.objects.all()

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            response = serializer.save()
            return Response(response, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    

class ClientRegisterApiView(generics.GenericAPIView):
    serializer_class = ClientRegisterSerializer
    queryset = Client.objects.all()

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            response = serializer.save()
            return Response(response, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



admin.py:
from django.contrib import admin

from accounts.models import CustomUser, Client

admin.site.register(CustomUser)
admin.site.register(Client)


urls.py:
from django.urls import path
from rest_framework_simplejwt.views import TokenObtainPairView

from accounts.views import RegisterApiView, ClientRegisterApiView

urlpatterns = [
    path('login/', TokenObtainPairView.as_view(), name='login_api'),
    path('register/', RegisterApiView.as_view()),
    path('client/register/', ClientRegisterApiView.as_view()),
]